import ascon

class HeartbeatMessage:
    def __init__(self, type, autopilot, base_mode, custom_mode, system_status, mavlink_version):
        self.type = type
        self.autopilot = autopilot
        self.base_mode = base_mode
        self.custom_mode = custom_mode
        self.system_status = system_status
        self.mavlink_version = mavlink_version

    def serialize(self):
        # Simple serialization to bytes
        # This will convert the message object
        # into a byte array in little-endian
        # format. This allows the heartbeat
        # to be easily encrypted and transmitted.
        return (self.type.to_bytes(1, 'little') +
                self.autopilot.to_bytes(1, 'little') +
                self.base_mode.to_bytes(1, 'little') +
                self.custom_mode.to_bytes(4, 'little') +
                self.system_status.to_bytes(1, 'little') +
                self.mavlink_version.to_bytes(1, 'little'))
        
# Define a method to deserialize the decrypted message back into an object
def deserialize_to_object(decrypted_bytes):
    type_value = decrypted_bytes[0]
    autopilot_value = decrypted_bytes[1]
    base_mode_value = decrypted_bytes[2]
    custom_mode_value = int.from_bytes(decrypted_bytes[3:7], 'little')
    system_status_value = decrypted_bytes[7]
    mavlink_version_value = decrypted_bytes[8]
    
    return HeartbeatMessage(type_value, autopilot_value, base_mode_value, custom_mode_value,
                            system_status_value, mavlink_version_value)
        
def encrypt_message(serialized_msg, key, nonce, associated_data=b''):
    # Encrypt the message
    encrypted_msg = ascon.ascon_encrypt(key, nonce, associated_data, serialized_msg, variant="Ascon-128")
    return encrypted_msg

def decrypt_message(encrypted_msg, key, nonce, associated_data=b''):
    # Decrypt and return the message
    decrypted_msg = ascon.ascon_decrypt(key, nonce, associated_data, encrypted_msg, variant="Ascon-128")
    return decrypted_msg

def main():
    # Example values for each field
    # defined at https://mavlink.io/en/messages/common.html#MAV_AUTOPILOT
    type_value = 2  # MAV_TYPE_QUADROTOR
    autopilot_value = 12  # MAV_AUTOPILOT_PX4
    base_mode_value = 8  # MAV_MODE_FLAG_GUIDED_ENABLED, 0b00001000 guided mode enabled, system flies waypoints / mission items.
    custom_mode_value = 0  # A bitfield for use for autopilot-specific flags, 0 for now
    system_status_value = 4  # MAV_STATE_ACTIVE, system is active and might be already airborne. Motors are engaged.
    mavlink_version_value = 2  # Current version of MavLink

    # Initialize the HeartbeatMessage
    heartbeat_msg = HeartbeatMessage(type=type_value, 
                                     autopilot=autopilot_value, 
                                     base_mode=base_mode_value, 
                                     custom_mode=custom_mode_value, 
                                     system_status=system_status_value, 
                                     mavlink_version=mavlink_version_value)
    
    # Print the original message including all fields
    print("Original Message:")
    print(f"Type: {heartbeat_msg.type}, Autopilot: {heartbeat_msg.autopilot}, Base Mode: {heartbeat_msg.base_mode},")
    print(f"Custom Mode: {heartbeat_msg.custom_mode}, System Status: {heartbeat_msg.system_status}, Mavlink Version: {heartbeat_msg.mavlink_version}")

    # Serialize the message, converts our message to b'\x02\x0c\x08\x00\x00\x00\x00\x04\x02'
    serialized_msg = heartbeat_msg.serialize()

    # Define your encryption key and nonce (ensure they are secure and appropriately managed)
    # they are defined here for simulation purposes
    key = bytes.fromhex('3aeaa96690b296b1495ec9ee23ae7d55') # Must be 16 or 32 bytes for Ascon to work
    nonce = bytes.fromhex('c825196aed7f5df80038cd41bf265581') # nonce, so must be unique

    # Encrypt the message
    encrypted_msg = encrypt_message(serialized_msg, key, nonce)

    # decrypt the message
    decrypted_msg = decrypt_message(encrypted_msg, key, nonce)

    # Print results of encrypted and decrypted messages
    print("Encrypted Message:", encrypted_msg)
    print("Decrypted Message (as bytes):", decrypted_msg)
    
        
    # Deserialize the decrypted message back into an object
    deserialized_object = deserialize_to_object(decrypted_msg)

    # Print the deserialized object's fields
    print("\nDeserialized Message:")
    print(f"Type: {deserialized_object.type}, Autopilot: {deserialized_object.autopilot}, Base Mode: {deserialized_object.base_mode},")
    print(f"Custom Mode: {deserialized_object.custom_mode}, System Status: {deserialized_object.system_status}, Mavlink Version: {deserialized_object.mavlink_version}")

main()



