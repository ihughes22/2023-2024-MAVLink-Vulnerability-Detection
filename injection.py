#!/usr/bin/env python3

import math
from pymavlink import mavutil

# Class for formatting the Mission Item.
class mission_item:
    def __init__(self, seq, current, x, y, z):
        self.seq = seq
        self.frame = mavutil.mavlink.MAV_FRAME_GLOBAL_RELATIVE_ALT # Use Global Latitude and Longitude for position data
        self.command = mavutil.mavlink.MAV_CMD_NAV_WAYPOINT # Move to the waypoint
        self.current = current
        self.auto = 1
        self.param1 = 0.0 # Hold times
        self.param2 = 2.0 # Acceptance radius
        self.param3 = 20.0 # Pass through waypoint
        self.param4 = math.nan # Yaw angle
        self.x = x # Latitude
        self.y = y # Longitude
        self.z = z # Altitude
        self.mission_type = 0 # 0 = The MAV_MISSION_TYPE value for MAV_MISSION_TYPE_MISSION

# Arm the Drone
def arm(the_connection):
    print("-- Arming")
    the_connection.mav.command_long_send(the_connection.target_system, the_connection.target_component,mavutil.mavlink.MAV_CMD_COMPONENT_ARM_DISARM, 0, 1, 0,0,0,0,0,0)
    
    ack(the_connection, "COMMAND_ACK")

# Takeoff the Drone
def takeoff(the_connection):
    print("-- Takeoff Initiated")
    the_connection.mav.command_long_send(the_connection.target_system, the_connection.target_component,
                                         mavutil.mavlink.MAV_CMD_NAV_TAKEOFF, 0, 0, 0, 0, math.nan, 0, 0, 10)

    ack(the_connection, "COMMAND_ACK")
    
# Upload the mission items to the drone
# ... (previous code remains unchanged)

def upload_mission(the_connection, mission_items):
    print("-- Sending Message out")
    #n = len(mission_items)
    the_connection.mav.mission_count_send(the_connection.target_system, the_connection.target_component, 0, 0)

    ack(the_connection, "MISSION_REQUEST")

"""
    for waypoint in mission_items:  # Mission Item created based on the Mavlink Message protocol
        print("-- Creating a waypoint")
        the_connection.mav.mission_item_send(the_connection.target_system,
                                             the_connection.target_component,
                                             waypoint.seq,
                                             waypoint.frame,
                                             waypoint.command,
                                             waypoint.current,
                                             waypoint.autocontinue,
                                             waypoint.param1,
                                             waypoint.param2,
                                             waypoint.param3,
                                             waypoint.param4,
                                             waypoint.x,
                                             waypoint.y,
                                             waypoint.z,
                                             waypoint.mission_type)

    if waypoint == mission_items[n-1]:
        ack(the_connection, "MISSION_REQUEST")

    ack(the_connection, "MISSION_ACK")

    # Set RTL_TYPE parameter
    param_id = 'RTL_TYPE'
    param_value = 0  # Setting RTL_TYPE to 0 for direct return to launch
    # Get parameter information
    param_info = the_connection.param_fetch_one(param_id)

    # Check if parameter exists and set the parameter
    if param_info:
        param_type = param_info.param_type  # Get the parameter's type
        the_connection.param_set_send(param_id, None, param_type, param_value)
    else:
        print(f"Parameter {param_id} not found.")
       """

def set_return(the_connection):
    print("-- Set Return to Launch")
    the_connection.mav.command_long_send(the_connection.target_system, the_connection.target_component,mavutil.mavlink.MAV_CMD_NAV_RETURN_TO_LAUNCH, 0, 0, 0, 0, 0, 0, 0, 0)
    ack(the_connection, "COMMAND_ACK")

# Start mission
def start_mission(the_connection):
    print("-- Mission Start")
    the_connection.mav.command_long_send(the_connection.target_system, the_connection.target_component,mavutil.mavlink.MAV_CMD_MISSION_START, 0, 0, 0, 0, 0, 0, 0, 0)
    ack(the_connection, "COMMAND_ACK")

# Acknowledgement from the Drone
def ack(the_connection, keyword):
    print("-- Message Read: " + str(the_connection.recv_match(type=keyword, blocking=True)))

# Main Function
if __name__ == '__main__':
    print("-- Program Started")
    the_connection = mavutil.mavlink_connection('udpin:localhost:14540')

    while(the_connection.target_system == 0):
        print("-- Checking Heartbeat")
        the_connection.wait_heartbeat()
        print("-- Heartbeat from system (system %u component %u)" % (the_connection.target_system, the_connection.target_component))

# Clear existing waypoints
mission_waypoints = []

# Define mission items function
def mission_item(seq, current, command, x, y, z):
    waypoint = mavutil.mavlink.MAVLink_mission_item_message(
        the_connection.target_system,
        the_connection.target_component,
        seq,
        mavutil.mavlink.MAV_FRAME_GLOBAL_RELATIVE_ALT,
        command,
        current,
        1,  # autocontinue
        0, 0, 0, 0,  # params 1-4
        x, y, z  # Latitude, Longitude, Altitude
    )
    return waypoint

# Add mission items to the list
mission_waypoints.append(mission_item(0, 0, mavutil.mavlink.MAV_CMD_NAV_WAYPOINT, 42.43419362271835, -83.99861918353619, 20))  # Hover above takeoff point
mission_waypoints.append(mission_item(1, 0, mavutil.mavlink.MAV_CMD_NAV_WAYPOINT, 42.43432724637865, -83.99613425948624, 20))  # Hover above Destination Point
mission_waypoints.append(mission_item(2, 0, mavutil.mavlink.MAV_CMD_NAV_LAND, 42.43419362271835, -83.99861918353619, 10))  # Landing

# Upload the modified mission
upload_mission(the_connection, mission_waypoints)

# Arm, takeoff, start mission
"""
arm(the_connection)
takeoff(the_connection)
start_mission(the_connection)

# Monitor mission completion
for mission_item in mission_waypoints:
    print("-- Message Read: " + str(the_connection.recv_match(type="MISSION_ITEM_REACHED", condition=f"MISSION_ITEM_REACHED.seq == {mission_item.seq}", blocking=True)))

# Set return to launch
set_return(the_connection)
"""
